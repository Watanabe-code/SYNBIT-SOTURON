delete :: (Nat -> Nat -> Bool) -> Nat -> BX Nat -> BX ()
delete eq c a = case* a of
                  a' | eq c a' -> ()
                                  with (\v -> True)
                                  reconciled by (\s v -> s)
                  a' | not (eq c a') -> throw "Error" 
                                        with (\v -> True)
                                        reconciled by (\s v -> s)


data Nat = Z | S Nat

eqNat :: Nat -> Nat -> Bool
eqNat m n = case (m,n) of 
  (Z,Z) -> True
  (S Z,Z) -> False
  (Z,S Z) -> False
  (S m',S n') -> eqNat m' n'

not :: Bool -> Bool
not True = False
not False = True