div2B :: BX Nat -> BX Nat
div2B s = observe s (isEven) (div2subB)

div2subB :: Bool -> BX Nat -> BX Nat 
div2subB b n = 
  case* n of
    Z        -> Z
                with (\x1 -> andAlso b (isZ x1)) 
                reconciled by (\x0 -> \x1 -> Z)
    S Z      -> Z
                with (\x1 -> andAlso (not b) (isZ x1))
                reconciled by (\x0 -> \x1 -> S Z)
    S (S n') -> S (div2subB b n')
                with (\x1 -> not (isZ x1))
                reconciled by (\x0 -> \x1 -> if b then (S (S Z)) else (S (S (S Z))))

data Nat = Z 
         | S Nat 

isZ :: Nat -> Bool
isZ Z = True
isZ _ = False

not :: Bool -> Bool
not True = False
not False = True

div2 :: Nat -> Nat
div2 n = case n of
  Z        -> Z
  S Z      -> Z
  S (S n') -> S (div2 n')

int2nat :: Int -> Nat
int2nat 0 = Z
int2nat n = S (int2nat (n - 1))

isEven :: Nat -> Bool
isEven Z = True
isEven (S Z) = False
isEven (S (S n)) = isEven n

andAlso :: Bool -> Bool -> Bool
andAlso True True = True
andAlso x y = False

observe :: BX a -> (a -> b) -> (b -> BX a -> BX c) -> BX c
observe e1 f e2 = case* (pin e1 (\x -> !(f x))) of 
                  (p,q) -> case* (pin q (\r -> e2 r p)) of 
                             (s,t) -> t 
                                      with (\x1 -> True)
                                      reconciled by (\x0 -> \x1 -> x0)
                           with (\x1 -> True)
                           reconciled by (\x0 -> \x1 -> x0)