data Nat = Z
         | S Nat

mapNot :: [Bool] -> [Bool]
mapNot l = map (\a -> not a) l

not :: Bool -> Bool
not b = case b of
  True  -> False
  False -> True

map :: (Bool -> Bool) -> [Bool] -> [Bool]
map f l = case l of
  []   -> []
  x:xs -> f x:map f xs

not :: Bool -> Bool
not True = False
not False = True

andAlso :: Bool -> Bool -> Bool
andAlso True True = True
andAlso x y = False

orElse :: Bool -> Bool -> Bool
orElse False False = False
orElse x y = True
