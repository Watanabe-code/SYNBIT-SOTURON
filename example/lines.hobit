linesB_main :: BX String -> BX [String]
linesB_main str =     
  case* (pin str (\x -> !(last_is_NL x))) of 
    (a,b) -> case* (pin b (\y -> linesB y a)) of
               (c,d) -> d 
                       with (\x1 -> True)
                      reconciled by (\x0 -> \x1 -> x0)
           with (\x1 -> True)
           reconciled by (\x0 -> \x1 -> x0)
--×××linesB_root str = let* p = (pin str (\x -> !(last_is_NL x)))
--                    in 
--                     snd (pin (snd p) (\y -> linesB y (fst p)))

linesB_obse :: BX String -> BX [String]
linesB_obse str = observe str (last_is_NL) (linesB)

linesB :: Bool -> BX String -> BX [String]
linesB d str =
  case* str of
    [] -> []
          with null
          reconciled by (\_ _ -> [])
    ss -> (let* (xs, rest) = lines_subB d ss
           in
             xs : linesB d rest)
          with not . null
          reconciled by (\str ans -> if d then "\n" else " ")

lines_subB :: Bool -> BX String -> BX (String, String)
lines_subB d str =
  case* str of
    [] -> ([], [])
          with (\(l1, l2) -> andAlso (null l1) (null l2))
          reconciled by (\str ([],[]) -> [])
    '\n' : rest -> ([], rest)
                   with (\(l1, l2) -> if d
                                      then null l1
                                      else andAlso (null l1) (not (null l2)))
                   reconciled by (\str ([], rest) -> "\n")
    x : rest -> (let* (xs, rest') = lines_subB d rest
                  in (x:xs, rest'))
                with (\(l1, l2) -> not (null l1))
                reconciled by (\str (s1, s2) -> if d then " \n" else " ")

last_is_NL :: String -> Bool
last_is_NL s = case s of
  []        -> False
  '\n' : [] -> True
  x    : xs -> last_is_NL xs

andAlso :: Bool -> Bool -> Bool
andAlso True True = True
andAlso x y = False

null :: [a] -> Bool
null [] = True
null _ = False

not :: Bool -> Bool
not True = False
not False = True

snd :: BX (a,b) -> BX b
snd = \t -> case* t of 
            (a,b) -> b
                with (\x1 -> True)
                reconciled by (\x0 -> \x1 -> x0)

fst :: BX (a,b) -> BX a 
fst = \t -> case* t of 
            (a,b) -> a
                with (\x1 -> True)
                reconciled by (\x0 -> \x1 -> x0)

observe :: BX a -> (a -> b) -> (b -> BX a -> BX c) -> BX c
observe e1 f e2 = case* (pin e1 (\x -> !(f x))) of 
                  (p,q) -> case* (pin q (\r -> e2 r p)) of 
                             (s,t) -> t 
                                      with (\x1 -> True)
                                      reconciled by (\x0 -> \x1 -> x0)
                           with (\x1 -> True)
                           reconciled by (\x0 -> \x1 -> x0) 