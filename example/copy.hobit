copy :: BX a -> BX (a,a)
copy = \x -> case* x of
               x' -> (x',x')
                 with (\x1 -> True)
                 reconciled by (\x0 -> \x1 -> x0)


data Nat = Z 
         | S Nat 

isZ :: Nat -> Bool
isZ Z = True
isZ _ = False

not :: Bool -> Bool
not True = False
not False = True

div2 :: Nat -> Nat
div2 n = case n of
  Z        -> Z
  S Z      -> Z
  n' -> S (div2 n')

int2nat :: Int -> Nat
int2nat 0 = Z
int2nat n = S (int2nat (n - 1))

isEven :: Nat -> Bool
isEven Z = True
isEven (S Z) = False
isEven (S (S n)) = isEven n

andAlso :: Bool -> Bool -> Bool
andAlso True True = True
andAlso x y = False
