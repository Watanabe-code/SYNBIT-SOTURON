-- e = n | (e)+(e)
--
data Nat = Z
         | S Nat

data Exp = ENum Nat
         | EAdd Exp Exp

data Token = TNum Nat
           | LPar
           | RPar
           | Plus

-- parseExp :: [Char] -> Exp
-- parseExp s = pExp (tokenize s)
pExp :: [Token] -> Exp
pExp ts = let (e, []) = go ts
          in e

go :: [Token] -> (Exp, [Token])
go ts = case ts of
  TNum x:r -> (ENum x, r)
  LPar:r1  -> let (e1, RPar:Plus:LPar:r2) = go r1
                  (e2, RPar:r3) = go r2
              in (EAdd e1 e2, r3)

not :: Bool -> Bool
not True = False
not False = True

andAlso :: Bool -> Bool -> Bool
andAlso True True = True
andAlso x y = False

orElse :: Bool -> Bool -> Bool
orElse False False = False
orElse x y = True
