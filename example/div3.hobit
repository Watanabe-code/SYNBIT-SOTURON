div3B :: BX Nat -> BX Nat
div3B s = observe s mod3 (div3subB)   
                    
div3subB :: Nat -> BX Nat -> BX Nat 
div3subB m n = 
  case* n of
    Z            -> Z
                    with (\x1 -> andAlso (eqNat m Z) (isZ x1)) 
                    reconciled by (\x0 -> \x1 -> Z)
    S Z          -> Z
                    with (\x1 -> andAlso (eqNat m (S Z)) (isZ x1))
                    reconciled by (\x0 -> \x1 -> S Z)
    S (S Z)      -> Z
                    with (\x1 -> andAlso (eqNat m (S (S Z))) (isZ x1))
                    reconciled by (\x0 -> \x1 -> S (S Z))
    S (S (S n')) -> S (div3subB m n')
                    with (\x1 -> not (isZ x1))
                    reconciled by (\x0 -> \x1 -> if (eqNat m Z) then S (S (S Z)) 
                                                 else if (eqNat m (S Z)) then S (S (S (S Z)))
                                                 else S (S (S (S (S Z)))))

div3 :: BX Nat -> BX (Nat , Nat)
div3 n = case* n of
         Z            -> (Z , Z)
                         with (\v -> case v of (x,y) -> andAlso (eqNat y Z) (isZ x))
                         reconciled by (\s v -> Z)
         S Z          -> (Z , S Z)
                         with (\v -> case v of (x,y) -> andAlso (eqNat y (S Z)) (isZ x))
                         reconciled by (\s v -> S Z)
         S (S Z)      -> (Z , S (S Z)) 
                         with (\v -> case v of (x,y) -> andAlso (eqNat y (S (S Z))) (isZ x))
                         reconciled by (\s v ->S (S Z))
         S (S (S n')) -> let* (x,y) = div3 n' in (S x , y)
                         with (\v -> case v of (x,y) -> not (isZ x))
                         reconciled by (\s v -> case v of (x,y) -> if (eqNat y Z) then S (S (S Z)) 
                                                                   else if (eqNat y (S Z)) then S (S (S (S Z)))
                                                                   else S (S (S (S (S Z)))))

div3main :: BX Nat -> BX Nat
div3main n = fst (div3 n)

fst :: BX (a,b) -> BX a
fst t = let* (x,y) = t in
        x


data Nat = Z 
         | S Nat 

isZ :: Nat -> Bool
isZ Z = True
isZ _ = False

not :: Bool -> Bool
not True = False
not False = True

int2nat :: Int -> Nat
int2nat 0 = Z
int2nat n = S (int2nat (n - 1))

mod3 :: Nat -> Nat
mod3 n = case n of
  Z            -> Z 
  S Z          -> S Z 
  S (S Z)      -> S (S Z)
  S (S (S n')) -> mod3 n'

andAlso :: Bool -> Bool -> Bool
andAlso True True = True
andAlso x y = False

eqNat :: Nat -> Nat -> Bool
eqNat n m = case (n, m) of
  (Z, Z)       -> True
  (S n', Z)    -> False
  (Z, S m')    -> False
  (S n', S m') -> eqNat n' m'

observe :: BX a -> (a -> b) -> (b -> BX a -> BX c) -> BX c
observe e1 f e2 = case* (pin e1 (\x -> !(f x))) of 
                  (p,q) -> case* (pin q (\r -> e2 r p)) of 
                             (s,t) -> t 
                                      with (\x1 -> True)
                                      reconciled by (\x0 -> \x1 -> x0)
                           with (\x1 -> True)
                           reconciled by (\x0 -> \x1 -> x0)