
addinj :: Int -> BX Int -> BX Int
addinj n = liftInj (\x -> x + n)(\x -> x - n)

addlift :: Int -> BX Int -> BX Int
addlift n = lift (\x -> x + n) (\x -> \y -> x - y)
--lift ()(...)の部分は元のソースx,update view yを受け取って演算

data Nat = Z | S Nat

eqNat :: Nat -> Nat -> Bool
eqNat n m = case (n, m) of
  (Z, Z)       -> True
  (S n', Z)    -> False
  (Z, S m')    -> False
  (S n', S m') -> eqNat n' m'

deleteNat :: Nat -> BX Nat -> BX ()
deleteNat t = liftInj (\x -> case (eqNat t x) of True -> ())(\x -> t)

int2nat :: Int -> Nat
int2nat 0 = Z
int2nat n = S (int2nat (n - 1))

mergeNat :: BX (Nat , Nat) -> BX Nat
mergeNat t = let* (n,m)   = t in
             let* (n1,()) = pin n (\x -> deleteNat x m) in
             n1

f :: BX Nat -> BX Nat -> BX Bool
f n m = case* n of
          Z    -> case* m of 
                    Z    -> True
                            with (\v -> v)
                            reconciled by (\s v -> Z)
                    S m' -> False
                            with (\v -> not v)
                            reconciled by (\s v -> (S s))
                  with (\v -> True)
                  reconciled by (\s v -> s)
          S n' -> case* m of 
                    Z    -> False
                            with (\v -> not v)
                            reconciled by (\s v -> Z)
                    S m' -> f n' m'
                            with (\v -> True)
                            reconciled by (\s v ->(S s))
                  with (\v -> True)
                  reconciled by (\s v -> s)        

h :: BX (Nat,Nat) -> BX Bool
h t = let* (a,b) = t in 
      f a b

not :: Bool -> Bool
not True = False
not False = True