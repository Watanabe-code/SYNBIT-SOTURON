data Nat = Z
         | S Nat

uncurryReplicate :: (a, Nat) -> [a]
uncurryReplicate p = let (x, n) = p
                     in replicate x n

replicate :: a -> Nat -> [a]
replicate x n = case n of
  Z    -> []
  S n' -> x:replicate x n'

not :: Bool -> Bool
not True = False
not False = True

andAlso :: Bool -> Bool -> Bool
andAlso True True = True
andAlso x y = False

orElse :: Bool -> Bool -> Bool
orElse False False = False
orElse x y = True
