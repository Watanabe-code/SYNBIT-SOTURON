append :: ([a], [a]) -> [a]
append l = let (l1, l2) = l
           in append_ l1 l2

append_ :: [a] -> [a] -> [a]
append_ l1 l2 = case l1 of
  []   -> l2
  x:xs -> x:append_ xs l2

not :: Bool -> Bool
not True = False
not False = True

andAlso :: Bool -> Bool -> Bool
andAlso True True = True
andAlso x y = False

orElse :: Bool -> Bool -> Bool
orElse False False = False
orElse x y = True
