lines :: [Char] -> [[Char]]
lines str = case str of
  [] -> []
  ss -> let (xs, rest) = lines_sub ss
        in xs:lines rest

lines_sub :: [Char] -> ([Char], [Char])
lines_sub str = case str of
  []        -> ([], [])
  '\n':rest -> ([], rest)
  x:rest    -> let (xs, rest') = lines_sub rest
               in (x:xs, rest')

data Nat = Z 
         | S Nat

length :: [Char] -> Nat
length l = case l of 
  x : xs -> S (length xs)
  []     -> Z

eqOne :: Nat -> Bool
eqOne (S Z) = True
eqOne x = False 

moreOne :: Nat -> Bool
moreOne n = case n of 
  Z -> False
  (S Z) -> False
  _ -> True

lastNl :: [Char] -> [Char] 
lastNl [] = []
lastNl ['\n'] = ['\n']
lastNl (a : x) = lastNl x

nullx :: ([Char],[Char]) -> Bool
nullx ([],a) = True
nullx (a,b) = False

nully :: ([Char],[Char]) -> Bool
nully (a,[]) = True
nully (a,b) = False 

not :: Bool -> Bool
not True = False
not False = True

andAlso :: Bool -> Bool -> Bool
andAlso True True = True
andAlso x y = False

orElse :: Bool -> Bool -> Bool
orElse False False = False
orElse x y = True
