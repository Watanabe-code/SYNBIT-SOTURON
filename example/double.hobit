data Nat = Z
         | S Nat


not :: Bool -> Bool
not True = False
not False = True

andAlso :: Bool -> Bool -> Bool
andAlso True True = True
andAlso x y = False

orElse :: Bool -> Bool -> Bool
orElse False False = False
orElse x y = True

int2nat :: Int -> Nat
int2nat 0 = Z
int2nat n = S (int2nat (n - 1))

double :: BX Nat -> BX Nat
double = \n -> case* n of
                   Z ->
                       Z
                       with (\x1 -> case x1 of
                                        Z -> True
                                        _ -> False)
                       reconciled by (\x0 -> \x1 -> Z)
                   S n ->
                       S (S (double n))
                       with (\x1 -> case x1 of
                                        S (S x2) -> True
                                        _ -> False)
                       reconciled by (\x0 -> \x1 -> case x1 of
                                                        S (S x2) -> S x0)
                                        