ex1 = (tokenize "((S(S(Z)))+(Z))+(S(Z))", ENum Z, tokenize "Z")

ex2 = ( tokenize "Z"
      , EAdd (EAdd (ENum (S (S Z))) (ENum Z)) (ENum (S Z))
      , tokenize "((S(S(Z)))+(Z))+(S(Z))")

tokenize :: [Char] -> [Token]
tokenize cs = case cs of
  []          -> []
  '(':cs'     -> LPar:tokenize cs'
  ')':cs'     -> RPar:tokenize cs'
  '+':cs'     -> Plus:tokenize cs'
  'Z':cs'     -> TNum Z:tokenize cs'
  'S':'(':cs' -> let (n, ')':cs'') = num cs'
                 in (TNum (S n):tokenize cs'')

num :: [Char] -> (Nat, [Char])
num cs = case cs of
  'Z':cs'     -> (Z, cs')
  'S':'(':cs' -> let (n, ')':cs'') = num cs'
                 in (S n, cs'')
